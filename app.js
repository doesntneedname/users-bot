import express from 'express';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

const app = express();
const port = 3002;
const API_URL = 'https://api.pachca.com/api/shared/v1/users';
const TOKEN = process.env.PACHCA_API_TOKEN;
const MESSAGE_URL = 'https://api.pachca.com/api/shared/v1/messages';

let logCollector = [];

app.use(express.json());
console.log('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç POST /employee');
app.post('/employee', doPost);

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

// ===============================================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
// ===============================================
async function doPost(req, res) {
  try {
    const data = req.body;
    addLog(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(data)}`);

    if (data.type !== 'company_member') {
      addLog('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (type)');
      return res.status(400).send('Unsupported object type');
    }

    const { event, user_ids, created_at } = data;
    if (!Array.isArray(user_ids) || user_ids.length === 0) {
      addLog('user_ids –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
      return res.status(400).send('No user IDs');
    }

    for (let userId of user_ids) {
      addLog(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
      if (event === 'invite') {
        const scheduledTime = new Date(created_at).getTime() + 15 * 60 * 1000;
        const now = Date.now();

        const checkAndSend = async () => {
          const current = Date.now();
          if (current >= scheduledTime) {
            const userData = await fetchUserData(userId);
            if (!userData) {
              addLog(`(–û—Ç–ª–æ–∂–µ–Ω–Ω–æ) –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
              return;
            }

            const { first_name, last_name } = userData;

            if (!first_name || !last_name) {
              addLog(`(–û—Ç–ª–æ–∂–µ–Ω–Ω–æ) –ò–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
              return;
            }

            if (isTestAccount(first_name, last_name)) {
              addLog(`(–û—Ç–ª–æ–∂–µ–Ω–Ω–æ) –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
              return;
            }

            addLog(`(–û—Ç–ª–æ–∂–µ–Ω–Ω–æ) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
            await sendNotification(userData, 'invite', created_at);
          } else {
            setTimeout(checkAndSend, 60 * 1000);
          }
        };

        addLog(`–°–æ–±—ã—Ç–∏–µ invite. –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.`);
        checkAndSend();

      } else if (event === 'suspend') {
        const userData = await fetchUserData(userId);
        if (!userData) {
          addLog(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          continue;
        }

        const { first_name, last_name } = userData;

        if (!first_name || !last_name) {
          addLog(`–ò–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
          continue;
        }

        if (isTestAccount(first_name, last_name)) {
          addLog(`–¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
          continue;
        }

        await sendNotification(userData, 'suspend', created_at);

      } else if (event === 'confirm') {
        addLog(`–°–æ–±—ã—Ç–∏–µ confirm –ø–æ–ª—É—á–µ–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.`);
        continue;

      } else {
        addLog(`–°–æ–±—ã—Ç–∏–µ ${event} –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.`);
        continue;
      }
    }

    res.status(200).send('Success');
  } catch (error) {
    addLog(`–û—à–∏–±–∫–∞ –≤ doPost: ${error.message}`);
    res.status(500).send('Error');
  }
}

// ===============================================
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
// ===============================================
function isTestAccount(firstName, lastName) {
  const combined = `${firstName} ${lastName}`;
  const testRegex = /(—Ç–µ—Å—Ç|test)/i;
  const specialCharsRegex = /[\d+!@#$%^&*(),.?":{}|<>]/;
  return testRegex.test(combined) || specialCharsRegex.test(combined);
}

// ===============================================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// ===============================================
async function fetchUserData(userId) {
  try {
    const response = await fetch(`${API_URL}/${userId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${TOKEN}`,
        'Content-Type': 'application/json; charset=utf-8'
      }
    });
    const json = await response.json();
    return json.data;
  } catch (error) {
    addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ fetchUserData(${userId}): ${error.message}`);
    return null;
  }
}

// ===============================================
// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// ===============================================
async function sendNotification(userData, event, createdAt) {
  const { first_name, last_name, list_tags } = userData;
  const mainMessage = getMainMessage(event, first_name, last_name);
  if (!mainMessage) {
    addLog(`–°–æ–±—ã—Ç–∏–µ ${event} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    return;
  }

  const formattedDate = new Date(createdAt).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
  addLog(`–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: ${formattedDate}`);

  const mainPayload = {
    "message": {
      "entity_type": "discussion",
      "entity_id": 144223,
      "content": mainMessage
    }
  };

  try {
    const mainResponse = await fetch(MESSAGE_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${TOKEN}`,
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(mainPayload)
    });

    const mainResponseData = await mainResponse.json();
    if (mainResponseData.data && mainResponseData.data.id) {
      const messageId = mainResponseData.data.id;
      addLog(`–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID: ${messageId}`);
      sendThreadMessage(messageId, list_tags, event);
    } else {
      addLog('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    }
  } catch (error) {
    addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
  }
}

// ===============================================
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –∏ –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–µ
// ===============================================
async function sendThreadMessage(messageId, list_tags, event) {
  const threadUrl = `${MESSAGE_URL}/${messageId}/thread`;
  let threadContent;

  if (event === 'suspend') {
    threadContent = list_tags?.length
      ? `@lgmspb\n@lpaspb\n–¢–µ–≥–∏: ${list_tags.join(', ')}`
      : `@lgmspb\n@lpaspb`;
  } else if (event === 'invite') {
    threadContent = list_tags?.length
      ? `@lpaspb\n–¢–µ–≥–∏: ${list_tags.join(', ')}`
      : `@lpaspb`;
  } else {
    addLog(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç—Ä–µ–¥–∞: ${event}`);
    return;
  }

  try {
    const threadResponse = await fetch(threadUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${TOKEN}`,
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: '{}'
    });

    const threadData = await threadResponse.json();
    if (threadData.data && threadData.data.id) {
      const threadId = threadData.data.id;
      addLog(`–¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω. ID: ${threadId}`);

      const threadMessagePayload = {
        "message": {
          "entity_type": "thread",
          "entity_id": threadId,
          "content": threadContent
        }
      };

      await fetch(MESSAGE_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${TOKEN}`,
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify(threadMessagePayload)
      });

      addLog('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } else {
      addLog('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥.');
    }
  } catch (error) {
    addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥: ${error.message}`);
  }
}

// ===============================================
// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
// ===============================================
function getMainMessage(event, firstName, lastName) {
  switch (event) {
    case 'invite':
      return `–í—Å—Ç—Ä–µ—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${firstName} ${lastName} üôå`;
    case 'suspend':
      return `–ü—Ä–æ—â–∞–µ–º—Å—è —Å ${firstName} ${lastName} üò•`;
    default:
      return null;
  }
}

// ===============================================
// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
// ===============================================
function addLog(message) {
  console.log(message);
  logCollector.push(message);
}
